{"ast":null,"code":"import _classCallCheck from \"/Users/revintanri/Desktop/MyRead/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/revintanri/Desktop/MyRead/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/revintanri/Desktop/MyRead/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/revintanri/Desktop/MyRead/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/revintanri/Desktop/MyRead/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/revintanri/Desktop/MyRead/src/components/BookSearch.js\";\nimport React, { Component } from \"react\";\nimport * as BooksAPI from '../BooksAPI';\nimport { Link } from 'react-router-dom';\nimport Book from \"./Book\";\n\nvar BookSearch =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BookSearch, _Component);\n\n  function BookSearch() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BookSearch);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BookSearch)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      request: '',\n      searchResults: [] // Based on user's input, this func update the REQUEST state\n\n    };\n\n    _this.updateSearch = function (request) {\n      _this.setState({\n        request: request\n      });\n\n      _this.updateBookSearch(request);\n    };\n\n    _this.updateBookSearch = function (request) {\n      // If user type word in search bar, this func look for book that match\n      if (request) {\n        // display book that match\n        BooksAPI.search(request).then(function (searchResults) {\n          if (searchResults.error) {\n            _this.setState({\n              searchResults: []\n            });\n          } else {\n            _this.setState({\n              searchResults: searchResults\n            });\n          }\n        }); // if there is no query, then show on result\n      } else {\n        _this.setState({\n          searchResults: []\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(BookSearch, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"search-books\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"search-books-bar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(Link, {\n        className: \"close-search\",\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, \"Close\"), React.createElement(\"div\", {\n        className: \"search-books-input-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Search by title or author\",\n        value: this.state.request,\n        onChange: function onChange(event) {\n          return _this2.updateSearch(event.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"search-books-results\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"ol\", {\n        className: \"books-grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, this.state.searchResults.map(function (searchResult) {\n        return React.createElement(\"li\", {\n          key: searchResult.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }, React.createElement(Book, {\n          bookID: searchResult.id,\n          image: searchResult.imageLinks,\n          title: searchResult.title,\n          authors: searchResult.authors,\n          updateShelf: _this2.props.updateShelf,\n          currentShelf: searchResult.shelf,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }));\n      }))));\n    }\n  }]);\n\n  return BookSearch;\n}(Component);\n\nexport default BookSearch;","map":{"version":3,"sources":["/Users/revintanri/Desktop/MyRead/src/components/BookSearch.js"],"names":["React","Component","BooksAPI","Link","Book","BookSearch","state","request","searchResults","updateSearch","setState","updateBookSearch","search","then","error","event","target","value","map","searchResult","id","imageLinks","title","authors","props","updateShelf","shelf"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,QAAZ,MAA0B,aAA1B;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;IAGMC,U;;;;;;;;;;;;;;;;;UACFC,K,GAAO;AACHC,MAAAA,OAAO,EAAE,EADN;AAEHC,MAAAA,aAAa,EAAE,EAFZ,CAKP;;AALO,K;;UAMPC,Y,GAAe,UAACF,OAAD,EAAa;AACxB,YAAKG,QAAL,CAAc;AAACH,QAAAA,OAAO,EAAPA;AAAD,OAAd;;AACA,YAAKI,gBAAL,CAAsBJ,OAAtB;AACH,K;;UAEDI,gB,GAAmB,UAACJ,OAAD,EAAa;AAC5B;AACA,UAAIA,OAAJ,EAAa;AACT;AACAL,QAAAA,QAAQ,CAACU,MAAT,CAAgBL,OAAhB,EAAyBM,IAAzB,CAA+B,UAACL,aAAD,EAAmB;AAC9C,cAAIA,aAAa,CAACM,KAAlB,EAAyB;AACrB,kBAAKJ,QAAL,CAAc;AAAEF,cAAAA,aAAa,EAAE;AAAjB,aAAd;AACH,WAFD,MAEO;AACH,kBAAKE,QAAL,CAAc;AAAEF,cAAAA,aAAa,EAAbA;AAAF,aAAd;AACH;AACJ,SAND,EAFS,CAST;AACH,OAVD,MAUO;AACH,cAAKE,QAAL,CAAc;AAAEF,UAAAA,aAAa,EAAE;AAAjB,SAAd;AACH;AACJ,K;;;;;;;6BAEO;AAAA;;AAEJ,aAEI;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,SAAS,EAAC,cAAhB;AAA+B,QAAA,EAAE,EAAC,GAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,EAGI;AAAK,QAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,WAAW,EAAC,2BAFhB;AAGI,QAAA,KAAK,EAAE,KAAKF,KAAL,CAAWC,OAHtB;AAII,QAAA,QAAQ,EAAE,kBAACQ,KAAD;AAAA,iBAAW,MAAI,CAACN,YAAL,CAAkBM,KAAK,CAACC,MAAN,CAAaC,KAA/B,CAAX;AAAA,SAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAHJ,CADJ,EAcI;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKX,KAAL,CAAWE,aAAX,CACIU,GADJ,CACQ,UAACC,YAAD;AAAA,eACL;AAAI,UAAA,GAAG,EAAEA,YAAY,CAACC,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,IAAD;AACI,UAAA,MAAM,EAAGD,YAAY,CAACC,EAD1B;AAEI,UAAA,KAAK,EAAGD,YAAY,CAACE,UAFzB;AAGI,UAAA,KAAK,EAAGF,YAAY,CAACG,KAHzB;AAII,UAAA,OAAO,EAAEH,YAAY,CAACI,OAJ1B;AAKI,UAAA,WAAW,EAAE,MAAI,CAACC,KAAL,CAAWC,WAL5B;AAMI,UAAA,YAAY,EAAEN,YAAY,CAACO,KAN/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CADK;AAAA,OADR,CADL,CADJ,CAdJ,CAFJ;AAqCH;;;;EApEoBzB,S;;AAuEzB,eAAeI,UAAf","sourcesContent":["import React, { Component } from \"react\";\nimport * as BooksAPI from '../BooksAPI';\nimport { Link } from 'react-router-dom';\nimport Book from \"./Book\";\n\n\nclass BookSearch extends Component {\n    state= {\n        request: '',\n        searchResults: [],\n    }\n\n    // Based on user's input, this func update the REQUEST state\n    updateSearch = (request) => {\n        this.setState({request})\n        this.updateBookSearch(request)\n    }\n\n    updateBookSearch = (request) => {\n        // If user type word in search bar, this func look for book that match\n        if (request) {\n            // display book that match\n            BooksAPI.search(request).then ((searchResults) => {\n                if (searchResults.error) {\n                    this.setState({ searchResults: [] })\n                } else {\n                    this.setState({ searchResults })\n                }\n            })\n            // if there is no query, then show on result\n        } else {\n            this.setState({ searchResults: [] })\n        }\n    }\n  \n    render(){\n        \n        return(\n\n            <div className=\"search-books\">\n                <div className=\"search-books-bar\">\n                    <Link className=\"close-search\" to=\"/\">Close</Link>  \n                    \n                    <div className=\"search-books-input-wrapper\">\n                        <input \n                            type=\"text\" \n                            placeholder=\"Search by title or author\"\n                            value={this.state.request}\n                            onChange={(event) => this.updateSearch(event.target.value)}\n                            />\n                    </div>\n                </div>\n\n                <div className=\"search-books-results\">\n                    <ol className=\"books-grid\">\n                        {this.state.searchResults\n                            .map((searchResult)=>\n                            <li key={searchResult.id}>\n                                <Book \n                                    bookID ={searchResult.id}\n                                    image ={searchResult.imageLinks}\n                                    title ={searchResult.title}\n                                    authors={searchResult.authors}\n                                    updateShelf={this.props.updateShelf}\n                                    currentShelf={searchResult.shelf}\n                                />\n                            </li>\n                            )\n                        }\n                    </ol>\n                </div>\n            </div>\n\n        )\n    }\n}\n\nexport default BookSearch;"]},"metadata":{},"sourceType":"module"}